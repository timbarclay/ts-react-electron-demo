{"version":3,"sources":["webpack:///webpack/bootstrap a1bc86ec882f0c206ae4","webpack:///./src/main/main.ts","webpack:///external \"electron\"","webpack:///external \"path\"","webpack:///external \"url\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,wCAAuC;AACvC,KAAY,QAAQ,uBAAM,CAAU,CAAC;AACrC,uCAAsC;AACtC,KAAM,GAAG,GAAG,QAAQ,CAAC,GAAG;AACxB,2CAA0C;AAC1C,KAAM,aAAa,GAAG,QAAQ,CAAC,aAAa;AAE5C,KAAM,IAAI,GAAG,mBAAO,CAAC,CAAM,CAAC;AAC5B,KAAM,GAAG,GAAG,mBAAO,CAAC,CAAK,CAAC;AAE1B,+EAA8E;AAC9E,4EAA2E;AAC3E,KAAI,UAAU;AAEd;KACE,6BAA6B;KAC7B,UAAU,GAAG,IAAI,aAAa,CAAC,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAC,CAAC;KAE3D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;KAE7C,sCAAsC;KACtC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;SAC5B,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC;SAClD,QAAQ,EAAE,OAAO;SACjB,OAAO,EAAE,IAAI;MACd,CAAC,CAAC;KAEH,qBAAqB;KACrB,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE;KAErC,qCAAqC;KACrC,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAE;SACtB,iEAAiE;SACjE,mEAAmE;SACnE,oDAAoD;SACpD,UAAU,GAAG,IAAI;KACnB,CAAC,CAAC;AACJ,EAAC;AAED,yDAAwD;AACxD,0DAAyD;AACzD,uDAAsD;AACtD,IAAG,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC;AAE7B,qCAAoC;AACpC,IAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;KAC1B,2DAA2D;KAC3D,8DAA8D;KAC9D,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;SAClC,GAAG,CAAC,IAAI,EAAE;KACZ,CAAC;AACH,EAAC,CAAC;AAEF,IAAG,CAAC,EAAE,CAAC,UAAU,EAAE;KACjB,gEAAgE;KAChE,4DAA4D;KAC5D,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;SACxB,YAAY,EAAE;KAChB,CAAC;AACH,EAAC,CAAC;AAEF,6EAA4E;AAC5E,wEAAuE;;;;;;;AC9DvE,sC;;;;;;ACAA,kC;;;;;;ACAA,iC","file":"main/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a1bc86ec882f0c206ae4","// const electron = require('electron')\r\nimport * as electron from 'electron';\r\n// Module to control application life.\r\nconst app = electron.app\r\n// Module to create native browser window.\r\nconst BrowserWindow = electron.BrowserWindow\r\n\r\nconst path = require('path')\r\nconst url = require('url')\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow\r\n\r\nfunction createWindow () {\r\n  // Create the browser window.\r\n  mainWindow = new BrowserWindow({width: 800, height: 600})\r\n\r\nconsole.log(path.join(__dirname, 'index.html'))\r\n\r\n  // and load the index.html of the app.\r\n  mainWindow.loadURL(url.format({\r\n    pathname: path.join(__dirname, \"..\", 'index.html'),\r\n    protocol: 'file:',\r\n    slashes: true\r\n  }))\r\n\r\n  // Open the DevTools.\r\n  mainWindow.webContents.openDevTools()\r\n\r\n  // Emitted when the window is closed.\r\n  mainWindow.on('closed', function () {\r\n    // Dereference the window object, usually you would store windows\r\n    // in an array if your app supports multi windows, this is the time\r\n    // when you should delete the corresponding element.\r\n    mainWindow = null\r\n  })\r\n}\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on('ready', createWindow)\r\n\r\n// Quit when all windows are closed.\r\napp.on('window-all-closed', function () {\r\n  // On OS X it is common for applications and their menu bar\r\n  // to stay active until the user quits explicitly with Cmd + Q\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n})\r\n\r\napp.on('activate', function () {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (mainWindow === null) {\r\n    createWindow()\r\n  }\r\n})\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and require them here.\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main/main.ts","module.exports = require(\"electron\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"electron\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"url\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"url\"\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}